// ====================================
// prisma/schema.prisma
// ====================================

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// ----------------------------------
//  Zentrale Tabelle: Period
// ----------------------------------
model Period {
  id                  Int                   @id @default(autoincrement())
  periodNumber        Int                   // Periode 0,1,2,...

  // 1:1-Verknüpfungen (Sheets mit genau einem Datensatz pro Periode)
  executiveSummary    ExecutiveSummary?
  productionReport    ProductionReport?
  rndReport           RnDReport?
  inventoryReport     InventoryReport?
  personnelReport     PersonnelReport?
  costTypesReport     CostTypesReport?
  costCentersReport   CostCentersReport?
  costObjectsReport   CostObjectsReport?
  incomeStatement     IncomeStatement?
  liquidityReport     LiquidityReport?
  cashflowStatement   CashflowStatement?
  balanceSheet        BalanceSheet?
  valueKPIReport      ValueKPIReport?
  decisionProtocol    DecisionProtocol?
  
  // 1:1 oder 1:n? => Hier habe ich mal 1:1 genommen:
  branchenReport      BranchenReport?
  // 1:n-Verknüpfungen (Sheets mit mehreren Zeilen)
  marketResearchRows  MarketResearchRow[]
  productionEquipments ProductionEquipment[]
  // ... falls du pro Periode mehrere Einträge in F&E (z. B. pro Produkt) speicherst, müsstest du auch das als 1:n anpassen. 
  // Ggf. pro "PersonalDepartment" o.Ä.

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// ----------------------------------
//  1) Executive Summary (Sheet: 2))
// ----------------------------------
model ExecutiveSummary {
  id                       Int      @id @default(autoincrement())
  periodId                 Int      @unique
  period                   Period   @relation(fields: [periodId], references: [id])

  aktienkurs               Float?
  umsatzGesamtMEUR         Float?
  periodenErgebnisMEUR     Float?      // z. B. 6,52
  absatzCopyClassic        Int?        // 43000
  umsatzCopyClassicMEUR    Float?      // 129
  geplanterAbsatz          Int?
  tatsaechlicherAbsatz     Int?

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

// -------------------------------------------------
//  2) Marktforschungsbericht (Sheet: 3)
//     -> Mehrere Zeilen (U1..U7) pro Periode => 1:n
// -------------------------------------------------
model MarketResearchRow {
  id               Int     @id @default(autoincrement())

  // Verknüpfung zur Periode
  periodId         Int
  period           Period  @relation(fields: [periodId], references: [id])

  unternehmen      String?  // "U1", "U2" etc.
  price            Float?
  priceDeviation   Float?
  technologyIndex  Float?
  werbeBudget      Float?
  ciBudget         Float?
  vertriebsMitarb  Int?
  bekanntheitsIdx  Float?
  kundenZufriedIdx Float?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// ----------------------------------------------
//  3) Fertigungsbericht (Sheet: 4) 
//     -> 1:1 pro Periode + Detailzeilen 1:n
// ----------------------------------------------
model ProductionReport {
  id                      Int       @id @default(autoincrement())
  periodId                Int       @unique
  period                  Period    @relation(fields: [periodId], references: [id])

  plannedProduction       Int?
  actualProduction        Int?
  utilizationMachinesPct  Float?
  utilizationStaffPct     Float?

  // Zusätzliche Kennzahlen aus dem Sheet
  //  (z. B. Summe Abschreibungen, Summe fixkosten ...),
  //  falls du sie brauchst
  
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

// -> Detailzeilen pro Fertigungsanlage (Typ A #1..#4)
model ProductionEquipment {
  id                 Int       @id @default(autoincrement())
  periodId           Int       // Wir verknüpfen 1:n direkt mit Period (oder optional: store productionReportId)
  // Option A: direkter Link auf Period:
  period             Period    @relation(fields: [periodId], references: [id])
  // Option B: Link auf ProductionReport:
  // productionReportId Int
  // productionReport   ProductionReport @relation(fields: [productionReportId], references: [id])

  type               String?   // "Typ A"
  number             Int?      // 1,2,3,4
  beschaffungsperiode Int?
  beschaffungswertMEUR Float?
  restlaufzeit       Int?
  abschreibungMEUR   Float?
  restbuchwertMEUR   Float?
  sonstFixkostenMEUR Float?
  resterloesPct      Float?

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// --------------------------------------------------
//  4) Forschung & Entwicklung (Sheet: 5) 
//     -> 1:1 pro Periode
// --------------------------------------------------
model RnDReport {
  id                   Int    @id @default(autoincrement())
  periodId             Int    @unique
  period               Period @relation(fields: [periodId], references: [id])

  investTotalMEUR      Float?  // Summe F&E
  technologyIndex      Float?
  ecologyIndex         Float?
  valueAnalysisIndex   Float?
  employeeCount        Int?    // z. B. 35

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// --------------------------------------------------
//  5) Lager (Sheet: 6) -> 1:1 pro Periode
// --------------------------------------------------
model InventoryReport {
  id                             Int     @id @default(autoincrement())
  periodId                       Int     @unique
  period                         Period  @relation(fields: [periodId], references: [id])

  lagerendbestandEinsatzstoffe   Int?
  lagerendbestandFertigerzeugn   Int?

  // Aus der Tabelle: 
  // +Zugang / -Abgang /...
  zugangVonLieferantStueck       Int?
  zugangVonFertigungStueck       Int?
  abgangAnVertriebStueck         Int?
  // ggf. Lagerwert je Einheit:
  lagerwertMEUR                  Float?
  
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
}

// --------------------------------------------------
//  6) Personal (Sheet: 7) -> 1:1 pro Periode
// --------------------------------------------------
model PersonnelReport {
  id               Int      @id @default(autoincrement())
  periodId         Int      @unique
  period           Period   @relation(fields: [periodId], references: [id])

  totalBegin       Int?
  totalHired       Int?
  totalFired       Int?
  totalEnd         Int?
  // usw. (wenn du Summen brauchst)

  // Falls du pro Abteilung einzelne Zeilen brauchst, 
  // definiere eine 1:n-Beziehung (siehe unten)
  departments      PersonnelDepartment[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// -> Detail pro Abteilung
model PersonnelDepartment {
  id                  Int              @id @default(autoincrement())
  personnelReportId   Int
  personnelReport     PersonnelReport  @relation(fields: [personnelReportId], references: [id])
  
  department          String           // "Einkauf", "Verwaltung", ...
  beginCount          Int?
  hiredCount          Int?
  firedCount          Int?
  endCount            Int?

  // Löhne, Gehälter, Personalnebenkosten pro Abteilung? => Optional hier
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// --------------------------------------------------
//  7) Kostenartenrechnung (Sheet: 8) -> 1:1 pro Periode
// --------------------------------------------------
model CostTypesReport {
  id                 Int    @id @default(autoincrement())
  periodId           Int    @unique
  period             Period @relation(fields: [periodId], references: [id])

  einsatzstoffeMEUR   Float?
  betriebsstoffeMEUR  Float?
  loehneGehaelterMEUR Float?
  einstellEntlassMEUR Float?
  pensionsRueckstMEUR Float?
  sonstPersonalMEUR   Float?
  abschreibungenMEUR  Float?
  sonstigerAufwandMEUR Float?
  // usw. – aus dem Sheet

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// --------------------------------------------------
//  8) Kostenstellenrechnung (Sheet: 9) -> 1:1 
// --------------------------------------------------
model CostCentersReport {
  id                 Int     @id @default(autoincrement())
  periodId           Int     @unique
  period             Period  @relation(fields: [periodId], references: [id])

  // Bsp: Summen je Kostenstelle (Einkauf, Fertigung, F&E, Vertrieb, Verwaltung)
  einkaufMEUR        Float?
  fertigungMEUR      Float?
  forschungMEUR      Float?
  vertriebMEUR       Float?
  verwaltungMEUR     Float?
  
  // Etc. – je nach Sheet

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// --------------------------------------------------
//  9) Kostenträgerrechnung (Sheet: 10) -> 1:1 
// --------------------------------------------------
model CostObjectsReport {
  id              Int     @id @default(autoincrement())
  periodId        Int     @unique
  period          Period  @relation(fields: [periodId], references: [id])

  // Felder: 
  // z. B. "Herstellkosten", "Umsatzkosten", ...
  herstellkostenUmsatzMEUR Float?
  fEEinzelkostenMEUR       Float?
  vertriebMEUR             Float?
  verwaltungMEUR           Float?
  betriebsergebnisMEUR     Float?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// --------------------------------------------------
// 10) Gewinn- und Verlustrechnung (Sheet: 11) -> 1:1
// --------------------------------------------------
model IncomeStatement {
  id                  Int    @id @default(autoincrement())
  periodId            Int    @unique
  period              Period @relation(fields: [periodId], references: [id])

  umsatzMEUR          Float?
  sonstErtraegeMEUR   Float?
  bestandVeraendMEUR  Float?   // z. B. -6,58
  materialAufwandMEUR Float?   // 26
  personalAufwandMEUR Float?   // 55,3
  abschreibungenMEUR  Float?
  sonstAufwandMEUR    Float?
  betriebsergebnisMEUR Float?
  finanzErgebnisMEUR  Float?
  gewinnVorSteuernMEUR Float?
  steuernMEUR         Float?
  periodenErgebnisMEUR Float? // z. B. 6,52

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// --------------------------------------------------
// 11) Liquiditätsrechnung (Sheet: 12) -> 1:1
// --------------------------------------------------
model LiquidityReport {
  id                      Int    @id @default(autoincrement())
  periodId                Int    @unique
  period                  Period @relation(fields: [periodId], references: [id])

  kassenanfangMEUR        Float?
  einzahlungenUmsatzAkt   Float?
  einzahlungenUmsatzVor   Float?
  summeEinzahlungen       Float?
  auszahlungenEinsatzSt   Float?
  auszahlungenPersonal    Float?
  auszahlungenSonstig     Float?
  rueckzahlungKrediteMEUR Float?
  kassenendbestandMEUR    Float?

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// --------------------------------------------------
// 12) Cashflow Statement (Sheet: 13) -> 1:1
// --------------------------------------------------
model CashflowStatement {
  id                    Int    @id @default(autoincrement())
  periodId              Int    @unique
  period                Period @relation(fields: [periodId], references: [id])

  periodenErgebnisMEUR  Float?
  abschreibungMEUR      Float?
  erhoehungPensionMEUR  Float?
  traditionellerCFMEUR  Float?
  operativerCFMEUR      Float?
  investitionsCFMEUR    Float?
  finanzierungsCFMEUR   Float?
  endKassenbestandMEUR  Float?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// --------------------------------------------------
// 13) Bilanz (Sheet: 14) -> 1:1
// --------------------------------------------------
model BalanceSheet {
  id                   Int    @id @default(autoincrement())
  periodId             Int    @unique
  period               Period @relation(fields: [periodId], references: [id])

  anlagevermoegenMEUR Float?
  umlaufvermoegenMEUR Float?
  eigenkapitalMEUR     Float?
  pensionsRueckstMEUR  Float?
  verbindlichkeitenMEUR Float?
  bilanzsummeMEUR      Float?

  // Optional: Falls du Bauten vs. Maschinen differenzieren willst
  grundstueckeMEUR     Float?
  maschinenMEUR        Float?
  fertigeErzeugnisseMEUR Float?
  forderungenMEUR      Float?
  kassenbestandMEUR    Float?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// --------------------------------------------------
// 14) Geschäftsbericht der Branche (Sheet: 15) 
//     -> Jeder Periode, evtl. 1 Datensatz oder 
//        7 Datensätze (U1..U7)? 
// --------------------------------------------------

// Option A: 1:1 + Felder mit Summen
model BranchenReport {
  id            Int      @id @default(autoincrement())
  periodId      Int      @unique
  period        Period   @relation(fields: [periodId], references: [id])

  // If we only store the average or single row
  // If you want 1 row per competitor, do a 1:n
  // Cf. "MarketResearchRow" approach
  // ...
  gesamtUmsatzMEUR Float?
  gewinnVorSteuernMEUR Float?
  periodenErgebnisMEUR  Float?

  // etc.

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// --------------------------------------------------
// 15) Wertorientierte Kennzahlen (Sheet: 16) -> 1:1
// --------------------------------------------------
model ValueKPIReport {
  id               Int    @id @default(autoincrement())
  periodId         Int    @unique
  period           Period @relation(fields: [periodId], references: [id])

  eigenkapitalMEUR        Float?
  eigenkapitalquotePct    Float?
  eigenkapitalrenditePct  Float?
  fremdkapitalMEUR        Float?
  fremdkapitalquotePct    Float?
  waccPct                 Float?
  nopatMEUR               Float?
  traditionellerCFMEUR    Float?
  netWorkingCapitalMEUR   Float?
  netCapitalEmployedMEUR  Float?
  rocePct                 Float?
  evaMEUR                 Float?
  evaAenderungMEUR        Float?
  cfroiPct                Float?
  ubcfMEUR                Float?
  dubcfMEUR               Float?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// --------------------------------------------------
// 16) Entscheidungsprotokoll (Sheet: 17) -> 1:1? 
//     Tatsächlich zeigt das Sheet mehrere Zeilen 
//     (z. B. Preis Markt1, Werbebudget, etc.). 
//     Evtl. 1:n-Liste. Hier nur Minimalvariante 1:1
// --------------------------------------------------
model DecisionProtocol {
  id               Int     @id @default(autoincrement())
  periodId         Int     @unique
  period           Period  @relation(fields: [periodId], references: [id])

  // Auszug: 
  priceMarket1      Float?
  werbungMarket1MEUR Float?
  vertriebPersonalEnd Int?
  // ... etc. 
  // Da hier zig Detailentscheidungen stehen, 
  // man könnte es 1:n machen 
  // (DecisionProtocolEntry).
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

